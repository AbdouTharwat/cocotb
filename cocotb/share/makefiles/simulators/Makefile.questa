###############################################################################
# Copyright (c) 2013, 2018 Potential Ventures Ltd
# Copyright (c) 2013 SolarFlare Communications Inc
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd,
#       SolarFlare Communications Inc nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

include $(shell cocotb-config --makefiles)/Makefile.inc

    CMD_BIN := qrun
    CMD_BIN_VIS := vis

ifdef QUESTA_BIN_DIR
    CMD := $(shell :; command -v $(QUESTA_BIN_DIR)/$(CMD_BIN) 2>/dev/null)
    CMD_V := $(shell :; command -v $(QUESTA_BIN_DIR)/$(CMD_BIN_VIS) 2>/dev/null)
else
    # auto-detect bin dir from system path
    CMD := $(shell :; command -v $(CMD_BIN) 2>/dev/null)
    CMD_V := $(shell :; command -v $(CMD_BIN_VIS) 2>/dev/null)
endif

ifeq (, $(CMD))
    $(error Unable to locate command >$(CMD_BIN)<)
endif
ifeq (, $(CMD_V))
    $(error Unable to locate command >$(CMD_BIN_VIS)<)
endif

DESIGNFILE ?= design.bin
WAVEFILE ?= qwave.db
RTL_LIBRARY ?= work

TOPLEVEL_LIBRARY ?= $(RTL_LIBRARY)
TOPLEVEL := "$(TOPLEVEL_LIBRARY).$(TOPLEVEL)"

ifndef VLOG_ARGS
    VLOG_ARGS = -timescale $(COCOTB_HDL_TIMEUNIT)/$(COCOTB_HDL_TIMEPRECISION) -mfcu
endif

ifdef VERILOG_INCLUDE_DIRS
    VLOG_ARGS += +incdir+$(VERILOG_INCLUDE_DIRS)
endif

# below allows for maintaining legacy syntax as well as enables using cross-simulator vars COMPILE_ARGS/SIM_ARGS
VLOG_ARGS += $(COMPILE_ARGS)
VCOM_ARGS += 
VOPT_ARGS += -access=rw+/. 
VSIM_ARGS += $(SIM_ARGS)

# by default Questa runs in Batch Mode, if GUI=1 ==> Visualizer opens in LiveSIM Mode, if GUI=2 ==> Visualizer opens in PostSIM Mode 
ifdef GUI
ifeq ($(filter-out 1 2,$(GUI)),)
    VOPT_ARGS += -designfile $(DESIGNFILE)
    VSIM_ARGS += -onfinish stop -qwavedb=+signal+memory=all+class+assertion+uvm_schematic+msg+wavefile=$(WAVEFILE)
endif
endif
ifeq ($(GUI),1)
    CMD += -gui -visualizer
    VOPT_ARGS += -debug,livesim
else
    CMD += -c
    VSIM_ARGS += -onfinish exit
endif

FLI_LIB := $(shell cocotb-config --lib-name-path fli questa)
# if this target is run, then cocotb did not build the library
$(FLI_LIB):
	@echo -e "ERROR: cocotb was not installed with an FLI library, as the mti.h header could not be located.\n\
	If you installed an FLI-capable simulator after cocotb, you will need to reinstall cocotb.\n\
	Please check the cocotb documentation on QuestaSim support." >&2 && exit 1

VHPI_LIB := $(shell cocotb-config --lib-name-path vhpi questa)
GPI_EXTRA :=
VHDL_GPI_INTERFACE ?= fli

ifeq ($(filter vhpi fli,$(VHDL_GPI_INTERFACE)),)
    $(error A valid value (fli or vhpi) was not provided for VHDL_GPI_INTERFACE=$(VHDL_GPI_INTERFACE))
endif

ifeq ($(TOPLEVEL_LANG),vhdl)
ifeq ($(VHDL_GPI_INTERFACE),fli)
    CUSTOM_COMPILE_DEPS += $(FLI_LIB)
    VSIM_ARGS += -foreign "cocotb_init $(FLI_LIB)"
else
    VSIM_ARGS += -foreign "vhpi_startup_routines_bootstrap $(call to_tcl_path,$(VHPI_LIB))"
endif
ifneq ($(VERILOG_SOURCES),)
    GPI_EXTRA :=  $(shell cocotb-config --lib-name-path vpi questa):cocotbvpi_entry_point
endif

else ifeq ($(TOPLEVEL_LANG),verilog)
    VSIM_ARGS += -pli $(shell cocotb-config --lib-name-path vpi questa)
ifneq ($(VHDL_SOURCES),)
    GPI_EXTRA := $(shell cocotb-config --lib-name-path $(VHDL_GPI_INTERFACE) questa):cocotb$(VHDL_GPI_INTERFACE)_entry_point
endif

else
   $(error A valid value (verilog or vhdl) was not provided for TOPLEVEL_LANG=$(TOPLEVEL_LANG))
endif

# Make sure all libs in SOURCES_VHDL_* are mentioned in VHDL_LIB_ORDER and vice versa
$(foreach LIB, $(VHDL_LIB_ORDER), $(check_vhdl_sources))
$(foreach SOURCES_VAR, $(filter VHDL_SOURCES_%, $(.VARIABLES)), $(check_lib_order))

ifdef SCRIPT_FILE
    VSIM_ARGS += -do $(SCRIPT_FILE)
endif

$(COCOTB_RESULTS_FILE): $(SIM_BUILD)
	$(RM) $(COCOTB_RESULTS_FILE)

	set -o pipefail; \
	MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) \
	GPI_EXTRA=$(GPI_EXTRA) TOPLEVEL_LANG=$(TOPLEVEL_LANG) \
	$(SIM_CMD_PREFIX) $(CMD) $(RUN_ARGS) -outdir $(SIM_BUILD) -makelib $(RTL_LIBRARY)  $(VERILOG_SOURCES) $(VHDL_SOURCES) \
	$(VLOG_ARGS) $(VCOM_ARGS) -end $(VOPT_ARGS) $(VSIM_ARGS) $(EXTRA_ARGS) $(PLUSARGS) +define+COCOTB_SIM -sv \
    -top $(SIM_BUILD)/$(TOPLEVEL) 2>&1 | tee $(SIM_BUILD)/sim.log   

ifeq ($(GUI),2)
	$(CMD_V) -designfile $(DESIGNFILE) -wavefile $(WAVEFILE)
endif

	$(call check_for_results_file)

clean::
	$(RM) -r $(SIM_BUILD) qrun* visualizer.log design.bin qwave.db transcript
